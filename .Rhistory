lapply(x, mean)
sapply(x, mean)
###########################
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4: 1)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
list(noise(1, 1, 2), noise(2, 2, 2), noise(3, 3, 2), noise(4, 4, 2), noise(5, 5, 2))
###########################
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, range)
###########################
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)
lapply(split(x, f), mean)
tapply(x, f, mean)
s <- split(airquality, airquality$Month)
s
fnx <- function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")])
fnx2 <- function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = T)
lapply(s, fnx)
sapply(s, fnx)
sapply(s, fnx2)
x <- rnorm(10)
x
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
split(x, list(f1, f2))
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = T))
###########################
printmessage <- function(x) {
if(x > 0)
print("1")
else
print("2")
invisible(x)
}
x <- printmessage(3)
printmessage(NA)
x <- list(a = 1:5, b = rnorm(10)); x
x <- list(a = 1:5, b = rnorm(10)); x
lapply(x, mean)
x <- list(a = 1:5, b = rnorm(10));
lapply(x, mean)
x <- 1:4
lapply(x, runif)
x <- 1:4
class(lapply(x, runif))
x <- 1:4
lapply(x, runif)
runif(1:4)
runif(1:4)
runif(1)
runif(1:4)
runif(2)
runif(3)
runif(4)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100))
lapply(x, mean)
sapply(x, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
x
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4: 1)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
s <- split(airquality, airquality$Month)
s
s <- split(airquality, airquality$Month)
s
fnx <- function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")])
fnx2 <- function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = T)
lapply(s, fnx)
x <- rnorm(10)
x
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
x <- rnorm(10)
x
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
split(x, list(f1, f2))
library(datasets)
data(iris)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
iris
s <- split(iris, iris$Species); s
s <- lapply(s, mean)
s <- s(s, mean)
s <- split(iris, iris$Species);
s <- s(s, mean)
s <- split(iris, iris$Species);
sapply(s, mean)
s <- split(iris, iris$Species);
lapply(s, mean)
s <- split(iris, iris$Species);
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
?colMeans
s <- split(iris, iris$Species);
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
colMeans(iris)
s <- split(iris, iris$Species);
lapply(s, function(x) mean(x[, "Sepal.Length"]))
s <- split(iris, iris$Species);s
lapply(s, function(x) mean(x[, "Sepal.Length"]))
library(datasets)
data(iris)
s <- split(iris, iris$Species);s
lapply(s, function(x) mean(x[, "Sepal.Length"]))
round(6.588)
lapply(s, function(x) mean(x[, "Sepal.Length"]))["virginica"]
sapply(s, function(x) mean(x[, "Sepal.Length"]))["virginica"]
round(sapply(s, function(x) mean(x[, "Sepal.Length"]))["virginica"])
iris
head(iris)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
head(iris)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
apply(mtcars, 2, mean)
apply(mtcars, 1, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars$mpg
mtcars$cyl
mean(mtcars$mpg, mtcars$cyl)
0
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean) #YES
with(mtcars, tapply(mpg, cyl, mean))
?with
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
mtcars$mpg
mtcars$cyl
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean)) #YES
tapply(mtcars$mpg, mtcars$cyl, mean) #YES
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x[c(1,3)]
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[1] - x[3])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[3] - x[1])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[1] - x[3])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(x[3] - x[1]))
abs(x[3] - x[1])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(x[3] - x[1]))
debug(ls)
ls
debug(ls)
ls()
debug(ls)
ls()
rm(list = ls*())
rm(list = ls())
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_151') # for 64-bit version
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_151') # for 64-bit version
library(xlsx)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(root)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[1]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[1]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]][[1]]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "/node", xmlValue)
doc
xpathSApply(rootNode, "/note", xmlValue)
xpathSApply(rootNode, "//note", xmlValue)
xpathSApply(rootNode, "//to", xmlValue)
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "//to", xmlValue)
xpathSApply(rootNode, "//from", xmlValue)
xpathSApply(rootNode, "//to", xmlValue)
xpathSApply(rootNode, "//from", xmlValue)
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/rigalves/repos")
jsonData
names(jsonData)
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/rigalves/repos")
class(jsonData)
names(jsonData)
jsonData
names(jsonData$owner)
jsonData$owner
myjson <- toJSON(iris, pretty = T)
myjson
myjson <- toJSON(iris, pretty = T)
myjson
iris2 <- fromJSON(myjson)
head(iris2)
library(data.table)
install.packages("data.table")
library(data.table)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv")
restData <- read.csv("./data/restaurants.csv")
s1 <- seq(1,10,by=2) ; s1
s2 <- seq(1,10,length=3); s2
x <- c(1,3,8,25,100); seq(along = x)
x
s1 <- seq(1,10,by=2) ; s1
s2 <- seq(1,10,length=3); s2
x <- c(1,3,8,25,100); x; seq(along = x)
restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData
table(restData$nearMe)
restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong,restData$zipCode < 0)
restData
restData$zipGroups = cut(restData$zipCode,breaks=quantile(restData$zipCode))
table(restData$zipGroups)
restData
table(restData$zipGroups,restData$zipCode)
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
version
setwd("C:/Users/rigal/Amazon Drive/DBRigo/clean-data-assignment")
summarise_all
####################################################################################
# Script created by Rigoberto Alvarez (rigoberto.alvarez@gmail.com)
# Subject: Peer-graded Assignment: Getting and Cleaning Data Course Project
# Part of the Data Science Specialization @ JHU
####################################################################################
# Initialization and useful variables
library(dplyr)
rm(list = ls())
if(!file.exists("./data")) {
dir.create("./data")
}
zippedDataSetsUrL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(zippedDataSetsUrL, destfile="./data/zippedDataSets.zip")
unzip(zipfile = "./data/zippedDataSets.zip", exdir = "./data", overwrite = T)
unzippedDataSetsPath <- "./data/UCI HAR Dataset/"
# 1. Merge the training and the test sets to create one data set.
# 1.1 Partial datasets
# 1.1.1 Label datasets
featuresDataSetPath <- paste(unzippedDataSetsPath, "features.txt", sep = "")
featuresDataSet <- read.table(file = featuresDataSetPath, stringsAsFactors = F)
names(featuresDataSet) <- c("feature.id", "feature.name")
activityLabelsDataSetPath <- paste(unzippedDataSetsPath, "activity_labels.txt", sep = "")
activityLabelsDataSet <- read.table(file = activityLabelsDataSetPath)
names(activityLabelsDataSet) <- c("activity.id", "activity.name")
# 1.1.2 Test datasets
subjectTestDataSetPath <- paste(unzippedDataSetsPath, "test/subject_test.txt", sep = "")
subjectTestDataSet <- read.table(file = subjectTestDataSetPath)
names(subjectTestDataSet) <- c("subject.id")
activityTestDataSetPath <- paste(unzippedDataSetsPath, "test/y_test.txt", sep = "")
activityTestDataSet <- read.table(file = activityTestDataSetPath)
names(activityTestDataSet) <- c("activity.id")
testDataSetPath <- paste(unzippedDataSetsPath, "test/X_test.txt", sep = "")
testDataSet <- read.table(file = testDataSetPath)
names(testDataSet) <- featuresDataSet$feature.name
# 1.1.3 Train datasets
subjectTrainDataSetPath <- paste(unzippedDataSetsPath, "train/subject_train.txt", sep = "")
subjectTrainDataSet <- read.table(file = subjectTrainDataSetPath)
names(subjectTrainDataSet) <- c("subject.id")
activityTrainDataSetPath <- paste(unzippedDataSetsPath, "train/y_train.txt", sep = "")
activityTrainDataSet <- read.table(file = activityTrainDataSetPath)
names(activityTrainDataSet) <- c("activity.id")
trainDataSetPath <- paste(unzippedDataSetsPath, "train/X_train.txt", sep = "")
trainDataSet <- read.table(file = trainDataSetPath)
names(trainDataSet) <- featuresDataSet$feature.name
# 1.2 Build complete test dataset: original test dataset + test subject data set + test activity data set
completeTestDataSet <- cbind(subjectTestDataSet, activityTestDataSet, testDataSet)
# 1.3 Build complete train dataset: original train dataset + train subject data set + train activity data set
completeTrainDataSet <- cbind(subjectTrainDataSet, activityTrainDataSet, trainDataSet)
# 1.4 Actual merging
mergedDataSet <- rbind(completeTestDataSet, completeTrainDataSet)
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
meanAndSTDFeatures <- grep("[Mm]ean|std", featuresDataSet$feature.name, value = T)
meanAndSTDDataSet <- cbind(mergedDataSet[1:2], mergedDataSet[meanAndSTDFeatures])
# 3. Use descriptive activity names to name the activities in the data set
finalDataSet <- merge(meanAndSTDDataSet, activityLabelsDataSet, by = "activity.id")
# 4. Appropriately label the data set with descriptive variable names.
# NOTE: Already done in the previous steps
# names(finalDataSet)
finalDataSet
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
averagedDataSet <- finalDataSet %>%
group_by(subject.id, activity.id, activity.name) %>%
summarize_at(meanAndSTDFeatures, mean) %>%
as.data.frame()
averagedDataSet
write.table(averagedDataSet, file = "./data/step5-tidy-dataset.txt", sep = " ", row.names = F)
# dim(averagedDataSet) # Should have 180 observations (30 subjects X 6 activities), each with the respective mean
rm(list = ls())
